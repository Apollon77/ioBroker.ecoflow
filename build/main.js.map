{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.2.0\n */\n\nimport * as utils from '@iobroker/adapter-core';\nimport axios from 'axios';\n\n\nclass Ecoflow extends utils.Adapter {\n\n    private sn='';\n    private apikey='';\n    private secretkey='';\n    private polltime=0;\n    private timeout=1000;\n    private adapterIntervals: any; //halten von allen Intervallen\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'ecoflow',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    private async onReady(): Promise<void> {\n\n        //P\u00FCfen die \u00FCbergabe da ist\n        if(this.config.sn) {\n            this.sn = this.config.sn;\n            this.log.debug('SN found:' + this.sn);\n        } else {\n            this.log.error('No secretkey is set, adapter stop')\n            return;\n        }\n\n        if(this.config.apikey) {\n            this.apikey = this.config.apikey;\n            this.log.debug('ApiKey found:' + this.apikey);\n        } else {\n            this.log.error('No apikey is set, adapter stop')\n            return;\n        }\n\n        if(this.config.secretkey) {\n            this.secretkey = this.config.secretkey;\n            this.log.debug('Secret-Key found:' + this.secretkey);\n        } else {\n            this.log.error('No secretkey is set, adapter stop')\n            return;\n        }\n\n        //Pr\u00FCfen Polltime\n        if(this.config.polltime > 0) {\n            this.polltime = this.config.polltime;\n            this.timeout = (this.polltime * 1000) - 500; //'500ms unter interval'\n\n        } else {\n            this.log.error('Wrong Polltime (polltime < 0), adapter stop')\n            return;\n        }\n\n        //holen f\u00FCr den Start einmal alle Daten\n        this.getEcoflowData();\n\n\n        //War alles ok, dann k\u00F6nnen wir die Daten abholen\n        this.adapterIntervals = this.setInterval(() => this.getEcoflowData(), this.polltime * 1000);\n\n    }\n\n    private onUnload(callback: () => void): void {\n        try {\n            clearInterval(this.adapterIntervals);\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    private getEcoflowData(): void {\n        this.log.debug('Ask Data from ecoflow cloud API');\n\n        try {\n            this.log.debug('call: ' + 'https://api.ecoflow.com/iot-service/open/api/device/queryDeviceQuota?sn=' + this.sn);\n            axios('https://api.ecoflow.com/iot-service/open/api/device/queryDeviceQuota?sn='+ this.sn, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'appKey': this.apikey,\n                    'secretKey': this.secretkey\n                },\n                timeout: this.timeout}).then( async response => {\n                this.log.debug('Get-Data from ecoflow:' + JSON.stringify(response.data));\n\n                if (response.data.data === undefined) {\n                    //API returned always 200 but error message\n                    this.log.error(response.data.message);\n                    this.setState('info.connection', false, true);\n                } else {\n                    //Global status Items\n                    await this.setStateAsync('status.soc', { val: response.data.data.soc, ack: true });\n                    await this.setStateAsync('status.remainTime', { val: response.data.data.remainTime, ack: true });\n                    await this.setNewRemainTime(response.data.data.remainTime); //Time in Days/Hour/Minute\n                    await this.setStateAsync('status.wattsOutSum', { val: response.data.data.wattsOutSum, ack: true });\n                    await this.setStateAsync('status.wattsInSum', { val: response.data.data.wattsInSum, ack: true });\n                    this.log.debug('Data received and wrote in objects');\n                    this.setState('info.connection', true, true);\n                }\n            }).catch(error => {\n                this.log.error(error.message)\n                this.setState('info.connection', false, true);\n            });\n        } catch (error: unknown) {\n            this.setState('info.connection', false, true);\n            if (typeof error === 'string') {\n                this.log.error(error);\n            } else if (error instanceof Error) {\n                this.log.error(error.message);\n            }\n        }\n    }\n\n    private async setNewRemainTime(remaintime: number): Promise<void> {\n        await this.setStateAsync('status.remainTimeDay', { val: Math.floor((remaintime/60)/24), ack: true });\n        await this.setStateAsync('status.remainTimeHour', { val: Math.floor((remaintime/60)), ack: true });\n        await this.setStateAsync('status.remainTimeMinute', { val: Math.floor((remaintime % 60)), ack: true });\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Ecoflow(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Ecoflow())();\n}\n\n"],
  "mappings": "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",
  "names": ["axios"]
}
